
1. How do you configure database connections in Spring Boot?

Database connections are configured using application.properties or application.yml files, specifying database URL, username, password, and driver class name.

Configuring database connections in Spring Boot is straightforward. Here's an in-depth explanation with examples:


Database Connection Configuration

Spring Boot supports various databases, including:

1. Relational databases (e.g., MySQL, PostgreSQL, Oracle)
2. NoSQL databases (e.g., MongoDB, Cassandra)
3. Embedded databases (e.g., H2, Derby)

Configuration Methods

You can configure database connections using:

1. application.properties or application.yml files
2. @Configuration classes
3. Spring Boot Starter Data dependencies

Using application.properties or application.yml

Create a application.properties or application.yml file in the root of your classpath (e.g., src/main/resources).

Example (MySQL):

properties
# application.properties
spring.datasource.url=jdbc:mysql://localhost:3306/mydb
spring.datasource.username=myuser
spring.datasource.password=mypassword
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver


Example (PostgreSQL):

# application.yml
spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/mydb
    username: myuser
    password: mypassword
    driver-class-name: org.postgresql.Driver


Using @Configuration classes

Create a Java configuration class annotated with @Configuration.

Example (MySQL):

@Configuration
public class DatabaseConfig {
 
    @Bean
    public DataSource dataSource() {
        DataSourceBuilder dataSourceBuilder = DataSourceBuilder.create();
        dataSourceBuilder.driverClassName("com.mysql.cj.jdbc.Driver");
        dataSourceBuilder.url("jdbc:mysql://localhost:3306/mydb");
        dataSourceBuilder.username("myuser");
        dataSourceBuilder.password("mypassword");
        return dataSourceBuilder.build();
    }
}


Using Spring Boot Starter Data dependencies

Add the relevant Starter dependency to your pom.xml (Maven) or build.gradle (Gradle) file.

Example (MySQL):

<!-- pom.xml -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
</dependency>


Example (PostgreSQL):

// build.gradle
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.postgresql:postgresql'
}


Database Connection Properties

Common database connection properties:

- spring.datasource.url: Database URL
- spring.datasource.username: Database username
- spring.datasource.password: Database password
- spring.datasource.driver-class-name: Database driver class name

Embedded Databases

For embedded databases like H2 or Derby, you don't need to specify the URL, username, or password.

Example (H2):

properties
# application.properties
spring.datasource.url=jdbc:h2:mem:mydb
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=


Testing

To test your database connection, create a simple repository or service class.

Example:

@Repository
public class UserRepository {
 
    @Autowired
    private DataSource dataSource;
 
    public void testConnection() {
        Connection connection = dataSource.getConnection();
        System.out.println("Connection established!");
        connection.close();
    }
}


Call the testConnection() method to verify your database connection.


Would you like:
