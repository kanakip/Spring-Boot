Servlet API
	1. Servlet API
	2. Interfaces in javax.servlet package
	3. Classes in javax.servlet package
	4. Interfaces in javax.servlet.http package
	5. Classes in javax.servlet.http package
	
The javax.servlet and javax.servlet.http packages represent interfaces and classes for servlet api.
	- The javax.servlet package contains many interfaces and classes that are used by the servlet or web container. 
	-  The javax.servlet.http package contains interfaces and classes that are responsible for http requests only.
Let's see what are the interfaces of javax.servlet package.
Interfaces in javax.servlet package
There are many interfaces in javax.servlet package. They are as follows:
	1. Servlet
	2. ServletRequest
	3. ServletResponse
	4. RequestDispatcher
	5. ServletConfig
	6. ServletContext
	7. SingleThreadModel
	8. Filter
	9. FilterConfig
	10. FilterChain
	11. ServletRequestListener
	12. ServletRequestAttributeListener
	13. ServletContextListener
	14. ServletContextAttributeListener

Classes in javax.servlet package
There are many classes in javax.servlet package. They are as follows:
	1. GenericServlet
	2. ServletInputStream
	3. ServletOutputStream
	4. ServletRequestWrapper
	5. ServletResponseWrapper
	6. ServletRequestEvent
	7. ServletContextEvent
	8. ServletRequestAttributeEvent
	9. ServletContextAttributeEvent
	10. ServletException
	11. UnavailableException

Interfaces in javax.servlet.http package
There are many interfaces in javax.servlet.http package. They are as follows:
	1. HttpServletRequest
	2. HttpServletResponse
	3. HttpSession
	4. HttpSessionListener
	5. HttpSessionAttributeListener
	6. HttpSessionBindingListener
	7. HttpSessionActivationListener
	8. HttpSessionContext (deprecated now)
Classes in javax.servlet.http package
There are many classes in javax.servlet.http package. They are as follows:
	1. HttpServlet
	2. Cookie
	3. HttpServletRequestWrapper
	4. HttpServletResponseWrapper
	5. HttpSessionEvent
	6. HttpSessionBindingEvent
	7. HttpUtils (deprecated now)

From <https://www.javatpoint.com/servlet-api> 


-------------------------------------------------------------


The Servlet API is a Java-based technology used for developing web applications. Here are the key points about the Servlet API:
1. Definition:  It's a set of Java classes and interfaces that define how web components interact with web servers.
2. Purpose:
	• Enables developers to create dynamic web content using Java.
	• Provides a platform-independent method for building web-based applications.
3. Core Components:
	• Servlet: A Java class that processes requests and constructs responses.
	• ServletContext: Represents the entire web application.
	• ServletConfig: Contains initialization parameters for a servlet.
	• HttpServletRequest: Encapsulates client request information.
	• HttpServletResponse: Used to formulate the response to the client.
4. Lifecycle Methods:
	• init(): Called when the servlet is initialized.
	• service(): Handles client requests.
	• destroy(): Called when the servlet is being destroyed.
5. Features:
	• Session management
	• Request dispatching
	• MIME-based request/response
	• Error handling
6. Integration:
	• Forms the foundation for many Java web frameworks, including Spring MVC.
7. Versions:
	• Latest version is Servlet 4.0, part of Java EE 8.
8. Usage:
	• Widely used in enterprise Java applications for creating web services and dynamic web pages.
	The Servlet API is fundamental to Java web development, providing the core functionality upon which more complex frameworks and applications are built.

give me example
Certainly! Here's an example of a simple servlet using the Servlet API:


import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
public class HelloServlet extends HttpServlet {
    
    public void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        
        out.println("<html>");
        out.println("<head><title>Hello Servlet</title></head>");
        out.println("<body>");
        out.println("<h1>Hello, World!</h1>");
        out.println("</body>");
        out.println("</html>");
    }
}


This example demonstrates:
	• Extending HttpServlet: The class extends HttpServlet, which is part of the Servlet API.
	• Overriding doGet(): This method handles HTTP GET requests.
	• Using HttpServletRequest and HttpServletResponse: These objects represent the request from the client and the response to be sent back.
	• Setting Content Type: response.setContentType("text/html") informs the client that the response is HTML.
	• Writing the Response: Using PrintWriter to send HTML content back to the client.
To use this servlet, you would need to configure it in your web.xml file or use annotations in more recent versions of the Servlet API. Here's a simple web.xml configuration:

xmlCopy to clipboard
<web-app>
    <servlet>
        <servlet-name>HelloServlet</servlet-name>
        <servlet-class>HelloServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>HelloServlet</servlet-name>
        <url-pattern>/hello</url-pattern>
    </servlet-mapping>
</web-app>

This configuration maps the /hello URL to the HelloServlet class. When a user accesses this URL, they'll see the "Hello, World!" message in their browser.
