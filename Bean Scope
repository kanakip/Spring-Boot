list of Bean Scopes in Spring Framework:
	1. Singleton (default)
	2. Prototype
	3. Request
	4. Session
	5. Application
These bean scopes define the lifecycle and visibility of beans in a Spring application. Here's a brief explanation of each:

1. Singleton (default):
	• Only one instance of the bean is created for the entire application.
	• This instance is shared across the entire application.
	• It's the default scope if no other is specified.
2. Prototype:
	• A new instance is created every time the bean is requested.
	• Useful for stateful beans.
3. Request:
	• A new instance is created for each HTTP request.
	• Only valid in web-aware Spring ApplicationContext.
4. Session:
	• A single instance is created and maintained for the duration of an HTTP session.
	• Also only valid in web-aware Spring ApplicationContext.
5. Application:
	• One instance is created for the lifecycle of a ServletContext.
	• Similar to singleton, but with a different scope (ServletContext vs. Spring ApplicationContext).
	Understanding these scopes is crucial for managing object lifecycles and state in Spring applications, allowing developers to control how and when bean instances are created and destroyed.

6. Singleton (default): Example: Database connection pool

@Bean
@Scope("singleton")
public DataSource dataSource() {
    return new BasicDataSource();
}

This single instance is shared across the application, ensuring efficient resource usage.

7. Prototype: Example: Shopping cart
@Bean
@Scope("prototype")
public ShoppingCart cart() {
    return new ShoppingCart();
}

A new cart is created for each user, allowing individual item management.
1. Request: Example: User request details

@Bean
@Scope(value = WebApplicationContext.SCOPE_REQUEST, proxyMode = ScopedProxyMode.TARGET_CLASS)
public UserRequestDetails userRequestDetails() {
    return new UserRequestDetails();
}

Captures information specific to each HTTP request.
2. Session: Example: User preferences

@Bean
@Scope(value = WebApplicationContext.SCOPE_SESSION, proxyMode = ScopedProxyMode.TARGET_CLASS)
public UserPreferences userPreferences() {
    return new UserPreferences();
}

Maintains user settings throughout their session.
3. Application: Example: Application configuration

@Bean
@Scope(value = WebApplicationContext.SCOPE_APPLICATION, proxyMode = ScopedProxyMode.TARGET_CLASS)
public AppConfig appConfig() {
    return new AppConfig();
}
